# Generated from jsbach.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,137,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
        11,3,11,88,8,11,1,12,1,12,5,12,92,8,12,10,12,12,12,95,9,12,1,13,
        1,13,5,13,99,8,13,10,13,12,13,102,9,13,1,14,1,14,1,14,1,15,4,15,
        108,8,15,11,15,12,15,109,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,129,8,21,1,22,
        4,22,132,8,22,11,22,12,22,133,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,8,1,1,10,10,1,0,97,
        122,3,0,48,57,65,90,97,122,1,0,65,90,1,0,65,67,1,0,48,56,1,0,48,
        57,3,0,9,10,13,13,32,32,143,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,
        47,1,0,0,0,3,50,1,0,0,0,5,53,1,0,0,0,7,56,1,0,0,0,9,60,1,0,0,0,11,
        64,1,0,0,0,13,68,1,0,0,0,15,71,1,0,0,0,17,76,1,0,0,0,19,82,1,0,0,
        0,21,84,1,0,0,0,23,87,1,0,0,0,25,89,1,0,0,0,27,96,1,0,0,0,29,103,
        1,0,0,0,31,107,1,0,0,0,33,111,1,0,0,0,35,113,1,0,0,0,37,115,1,0,
        0,0,39,117,1,0,0,0,41,119,1,0,0,0,43,128,1,0,0,0,45,131,1,0,0,0,
        47,48,5,124,0,0,48,49,5,58,0,0,49,2,1,0,0,0,50,51,5,58,0,0,51,52,
        5,124,0,0,52,4,1,0,0,0,53,54,5,60,0,0,54,55,5,45,0,0,55,6,1,0,0,
        0,56,57,5,60,0,0,57,58,5,33,0,0,58,59,5,62,0,0,59,8,1,0,0,0,60,61,
        5,60,0,0,61,62,5,63,0,0,62,63,5,62,0,0,63,10,1,0,0,0,64,65,5,60,
        0,0,65,66,5,58,0,0,66,67,5,62,0,0,67,12,1,0,0,0,68,69,5,105,0,0,
        69,70,5,102,0,0,70,14,1,0,0,0,71,72,5,101,0,0,72,73,5,108,0,0,73,
        74,5,115,0,0,74,75,5,101,0,0,75,16,1,0,0,0,76,77,5,119,0,0,77,78,
        5,104,0,0,78,79,5,105,0,0,79,80,5,108,0,0,80,81,5,101,0,0,81,18,
        1,0,0,0,82,83,5,40,0,0,83,20,1,0,0,0,84,85,5,41,0,0,85,22,1,0,0,
        0,86,88,7,0,0,0,87,86,1,0,0,0,88,24,1,0,0,0,89,93,7,1,0,0,90,92,
        7,2,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,
        94,26,1,0,0,0,95,93,1,0,0,0,96,100,7,3,0,0,97,99,7,2,0,0,98,97,1,
        0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,28,1,0,0,
        0,102,100,1,0,0,0,103,104,7,4,0,0,104,105,7,5,0,0,105,30,1,0,0,0,
        106,108,7,6,0,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,
        109,110,1,0,0,0,110,32,1,0,0,0,111,112,5,43,0,0,112,34,1,0,0,0,113,
        114,5,42,0,0,114,36,1,0,0,0,115,116,5,47,0,0,116,38,1,0,0,0,117,
        118,5,45,0,0,118,40,1,0,0,0,119,120,5,37,0,0,120,42,1,0,0,0,121,
        129,2,60,62,0,122,123,5,47,0,0,123,129,5,61,0,0,124,125,5,60,0,0,
        125,129,5,61,0,0,126,127,5,62,0,0,127,129,5,61,0,0,128,121,1,0,0,
        0,128,122,1,0,0,0,128,124,1,0,0,0,128,126,1,0,0,0,129,44,1,0,0,0,
        130,132,7,7,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,
        133,134,1,0,0,0,134,135,1,0,0,0,135,136,6,22,0,0,136,46,1,0,0,0,
        7,0,87,93,100,109,128,133,1,6,0,0
    ]

class jsbachLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    LN = 12
    VAR = 13
    FNME = 14
    NOTE = 15
    NUM = 16
    ADD = 17
    MULT = 18
    DIV = 19
    SUBS = 20
    REM = 21
    COMP = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'<-'", "'<!>'", "'<?>'", "'<:>'", "'if'", "'else'", 
            "'while'", "'('", "')'", "'+'", "'*'", "'/'", "'-'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "LN", "VAR", "FNME", "NOTE", "NUM", "ADD", "MULT", "DIV", "SUBS", 
            "REM", "COMP", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "LN", "VAR", "FNME", 
                  "NOTE", "NUM", "ADD", "MULT", "DIV", "SUBS", "REM", "COMP", 
                  "WS" ]

    grammarFileName = "jsbach.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



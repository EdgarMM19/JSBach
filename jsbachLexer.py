# Generated from jsbach.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,210,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,
        18,1,19,1,19,4,19,128,8,19,11,19,12,19,129,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,3,20,141,8,20,1,21,1,21,5,21,145,8,21,10,
        21,12,21,148,9,21,1,22,1,22,5,22,152,8,22,10,22,12,22,155,9,22,1,
        23,4,23,158,8,23,11,23,12,23,159,1,23,4,23,163,8,23,11,23,12,23,
        164,3,23,167,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,186,8,29,1,30,4,30,189,
        8,30,11,30,12,30,190,1,30,1,30,1,31,1,31,1,31,1,31,1,31,5,31,200,
        8,31,10,31,12,31,203,9,31,1,31,1,31,1,31,1,31,1,31,1,31,0,0,32,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,10,3,0,10,10,13,
        13,34,34,1,0,65,66,1,0,65,71,1,0,49,55,1,0,97,122,5,0,48,57,65,90,
        95,95,97,122,128,255,1,0,65,90,1,0,48,57,3,0,9,10,13,13,32,32,1,
        0,126,126,223,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
        49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
        59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,68,1,0,0,0,5,
        71,1,0,0,0,7,74,1,0,0,0,9,76,1,0,0,0,11,78,1,0,0,0,13,82,1,0,0,0,
        15,86,1,0,0,0,17,90,1,0,0,0,19,93,1,0,0,0,21,98,1,0,0,0,23,104,1,
        0,0,0,25,107,1,0,0,0,27,110,1,0,0,0,29,115,1,0,0,0,31,117,1,0,0,
        0,33,119,1,0,0,0,35,121,1,0,0,0,37,123,1,0,0,0,39,125,1,0,0,0,41,
        140,1,0,0,0,43,142,1,0,0,0,45,149,1,0,0,0,47,166,1,0,0,0,49,168,
        1,0,0,0,51,170,1,0,0,0,53,172,1,0,0,0,55,174,1,0,0,0,57,176,1,0,
        0,0,59,185,1,0,0,0,61,188,1,0,0,0,63,194,1,0,0,0,65,66,5,124,0,0,
        66,67,5,58,0,0,67,2,1,0,0,0,68,69,5,58,0,0,69,70,5,124,0,0,70,4,
        1,0,0,0,71,72,5,60,0,0,72,73,5,45,0,0,73,6,1,0,0,0,74,75,5,91,0,
        0,75,8,1,0,0,0,76,77,5,93,0,0,77,10,1,0,0,0,78,79,5,60,0,0,79,80,
        5,33,0,0,80,81,5,62,0,0,81,12,1,0,0,0,82,83,5,60,0,0,83,84,5,63,
        0,0,84,85,5,62,0,0,85,14,1,0,0,0,86,87,5,60,0,0,87,88,5,58,0,0,88,
        89,5,62,0,0,89,16,1,0,0,0,90,91,5,105,0,0,91,92,5,102,0,0,92,18,
        1,0,0,0,93,94,5,101,0,0,94,95,5,108,0,0,95,96,5,115,0,0,96,97,5,
        101,0,0,97,20,1,0,0,0,98,99,5,119,0,0,99,100,5,104,0,0,100,101,5,
        105,0,0,101,102,5,108,0,0,102,103,5,101,0,0,103,22,1,0,0,0,104,105,
        5,60,0,0,105,106,5,60,0,0,106,24,1,0,0,0,107,108,5,56,0,0,108,109,
        5,60,0,0,109,26,1,0,0,0,110,111,5,114,0,0,111,112,5,252,0,0,112,
        113,5,99,0,0,113,114,5,107,0,0,114,28,1,0,0,0,115,116,5,40,0,0,116,
        30,1,0,0,0,117,118,5,41,0,0,118,32,1,0,0,0,119,120,5,35,0,0,120,
        34,1,0,0,0,121,122,5,123,0,0,122,36,1,0,0,0,123,124,5,125,0,0,124,
        38,1,0,0,0,125,127,5,34,0,0,126,128,8,0,0,0,127,126,1,0,0,0,128,
        129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,
        132,5,34,0,0,132,40,1,0,0,0,133,134,7,1,0,0,134,141,5,48,0,0,135,
        136,7,2,0,0,136,141,7,3,0,0,137,141,7,2,0,0,138,139,5,67,0,0,139,
        141,5,56,0,0,140,133,1,0,0,0,140,135,1,0,0,0,140,137,1,0,0,0,140,
        138,1,0,0,0,141,42,1,0,0,0,142,146,7,4,0,0,143,145,7,5,0,0,144,143,
        1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,44,1,
        0,0,0,148,146,1,0,0,0,149,153,7,6,0,0,150,152,7,5,0,0,151,150,1,
        0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,46,1,0,
        0,0,155,153,1,0,0,0,156,158,7,7,0,0,157,156,1,0,0,0,158,159,1,0,
        0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,167,1,0,0,0,161,163,7,7,
        0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,
        0,0,165,167,1,0,0,0,166,157,1,0,0,0,166,162,1,0,0,0,167,48,1,0,0,
        0,168,169,5,43,0,0,169,50,1,0,0,0,170,171,5,42,0,0,171,52,1,0,0,
        0,172,173,5,47,0,0,173,54,1,0,0,0,174,175,5,45,0,0,175,56,1,0,0,
        0,176,177,5,37,0,0,177,58,1,0,0,0,178,186,2,60,62,0,179,180,5,47,
        0,0,180,186,5,61,0,0,181,182,5,60,0,0,182,186,5,61,0,0,183,184,5,
        62,0,0,184,186,5,61,0,0,185,178,1,0,0,0,185,179,1,0,0,0,185,181,
        1,0,0,0,185,183,1,0,0,0,186,60,1,0,0,0,187,189,7,8,0,0,188,187,1,
        0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,1,
        0,0,0,192,193,6,30,0,0,193,62,1,0,0,0,194,195,5,126,0,0,195,196,
        5,126,0,0,196,197,5,126,0,0,197,201,1,0,0,0,198,200,8,9,0,0,199,
        198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,
        204,1,0,0,0,203,201,1,0,0,0,204,205,5,126,0,0,205,206,5,126,0,0,
        206,207,5,126,0,0,207,208,1,0,0,0,208,209,6,31,0,0,209,64,1,0,0,
        0,11,0,129,140,146,153,159,164,166,185,190,201,1,6,0,0
    ]

class jsbachLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    STR = 20
    NOTE = 21
    VAR = 22
    FNME = 23
    NUM = 24
    ADD = 25
    MULT = 26
    DIV = 27
    SUBS = 28
    REM = 29
    COMP = 30
    WS = 31
    COMMENT = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'<-'", "'['", "']'", "'<!>'", "'<?>'", "'<:>'", 
            "'if'", "'else'", "'while'", "'<<'", "'8<'", "'r\\u00FCck'", 
            "'('", "')'", "'#'", "'{'", "'}'", "'+'", "'*'", "'/'", "'-'", 
            "'%'" ]

    symbolicNames = [ "<INVALID>",
            "STR", "NOTE", "VAR", "FNME", "NUM", "ADD", "MULT", "DIV", "SUBS", 
            "REM", "COMP", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "STR", "NOTE", 
                  "VAR", "FNME", "NUM", "ADD", "MULT", "DIV", "SUBS", "REM", 
                  "COMP", "WS", "COMMENT" ]

    grammarFileName = "jsbach.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


